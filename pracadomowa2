# -------------------------------------------------------- 

# 

# Imię: Jowita 

# Nazwisko: Kwiatkowska 

# Numer albumu: 30332 

# 

# -------------------------------------------------------- 

# -------------------------------------------------------- 

# 

# Imię: Jowita 

# Nazwisko: Kwiatkowska 

# Numer albumu: 30332 

# Przesyłam także link do GitHub’a, którego zapomniałam załączyć poprzednio: 

# https://github.com/JowitkaKwiatkowska 

# 

# -------------------------------------------------------- 

## Zadanie.06  

# 

#	Firma sprzedaje trzy kategorie produktów A, B oraz C. Każdy z nich 

# jest obłożony inną stawką podatku VAT (odpowiednio: 8%, 10% i 20%). Pobierz 

# kategorię i cenę. Użyj wyrażenia warunkowego, aby wyliczyć cenę z podatkiem. 

# Zakomunikuj wynik do użytkownika. {użyj if else} 

# 

# -------------------------------------------------------- 

  

category <- 'C' #Pobranie kategorii 

price <- 50     #Pobranie ceny 

  

  

#Wyrażenie warunkowe, która wyświetla wynik do użytkownika 

if (category =='A'){ 

  cat('Obowiązuje stawka VAT 8%.','Cena wraz z podatkiem wynosi',price *1.08) 

} else if (category =='B'){ 

  cat('Obowiązuje stawka VAT 10%.','Cena wraz z podatkiem wynosi',price *1.10) 

} else { 

  cat('Obowiązuje stawka VAT 20%.','Cena wraz z podatkiem wynosi',price *1.20) 

} 

  

# -------------------------------------------------------- 

# Zadanie.07 

# 

#	Oblicz iloczyn elementów dowolnego wektora x za pomocą pętli while oraz repeat  

# {użyj while, repeat} 

#  

#	x <- 1:5 

#	 

# 

# -------------------------------------------------------- 

#Pętla while dla wektora 1:5 

wektor_x <- 1:5 

iloczyn <- 1 

i <- 1 

while(i <= length(wektor_x)){ 

  iloczyn <- iloczyn * wektor_x[i] 

  i <- i + 1 

  print(iloczyn) 

} 

  

#Pętla repeat dla wektora 1:10 

x <- 1:10 

prod_repeat <- 1 

j <- 1 

repeat{ 

prod_repeat <- prod_repeat * x[j] 

j <- j + 1 

print(prod_repeat) 

if(j > length(x)){ 

break 

  } 

} 

  

   

   

# -------------------------------------------------------- 

# Zadanie.08 

# 

# Użyj zbioru airquality. Odpowiedz na pytania: 		 

# a) ile jest przypadków w zbiorze 

# b) ile jest przypadków z brakami danych 

# c) ile, i jakich, jest zmiennych w zbiorze 

# d) ile, i jakich, jest zmiennych z brakami danych 

#  

# Sformułuj pełne odpowiedzi tekstowe. Wklej kod obliczeń. 

# 

# -------------------------------------------------------- 

#Uruchomienie odpowiedniej biblioteki, jeżeli nie jest jeszcze zainstalowana 

if(!require('stats')) { 

  install.packages('stats') 

  library('stats') 

} 

#Wczytanie danych airquality 

data(airquality) 

  

#a)Ile jest przypadków w zbiorze 

ile <- nrow(airquality) 

print(paste("Liczba przypadków w zbiorze airquality:",ile)) 

  

#b)Ile jest przypadków z brakami danych 

brak_danych <- sum(is.na(airquality)) 

print(paste("Liczba przypadków z brakami danych:", brak_danych)) 

  

#c)Ile, i jakich, jest zmiennych w zbiorze 

l_zmiennych <- ncol(airquality) 

nazwy_zmiennych <- colnames(airquality) 

print(paste("Liczba zmiennych w zbiorze airquality:", l_zmiennych)) 

print(paste("Nazwy zmiennych w zbiorze airquality:", paste(nazwy_zmiennych, collapse = ", "))) 

  

#d)Ile, i jakich, jest zmiennych z brakami danych 

zmienna_z_brakami <- colnames(airquality)[colSums(is.na(airquality)) > 0] 

liczba_zmiennych_z_brakami <- length(zmienna_z_brakami) 

  

print(paste("Liczba zmiennych z brakami danych:", liczba_zmiennych_z_brakami)) 

print(paste("Nazwy zmiennych z brakami danych:", paste(zmienna_z_brakami, collapse = ", "))) 

  

   

# -------------------------------------------------------- 

# Zadanie.09 

# 

#	Ciąg Fibonacciego to ciąg liczb naturalnych, taki że każdy kolejny 

# wyraz stanowi sumę dwóch poprzednich.  

#	https://pl.wikipedia.org/wiki/Ci%C4%85g_Fibonacciego 

#	 

#	Użyj pętli for, aby stworzyć 20 pierwszych wyrazów ciągu. 

#	Podaj ich sumę. {użyj pętli for} 

#	 

# --------------------------------------------------------   

#wektor 2 pierwszych znaków ciągu fib 

ciag_fib <- c(0,1)  

#pętla for dla 20 znaków 

for (i in 3:20){ 

  

  nowy = ciag_fib[i-1] + ciag_fib[i-2] 

  ciag_fib = c(ciag_fib, nowy) 

  

} 

print("Pierwsze 20 znaków ciągu fibinocciego to: ") 

print(ciag_fib) 

  

print(paste("Suma 20 znaków ciągu fibonacciego to: ", sum(ciag_fib))) 

  

# -------------------------------------------------------- 

# Zadanie.10 

#  

# Wygeneruj 100-elementowy wektor z rozkładu Poisonna z parametrem  

# lambda=5 zapomocą komendy {rpois} i przypisz go do zmiennej x. 

# Policz dla tego wektora: średnią, sumę, odchylenie standardowe.  

# Zwizualizuj wektor za pomocą histogramu oraz wykresu pudełkowego (boxplot) 

# (słupki w kolorze niebieskim, tytuł wykresu "Rozkład Poissona").  

#  

# --------------------------------------------------------   

  #Stworzenie wektora 100 elementowego z rozkładem Poissona, lambda = 5 

x <- rpois(100, 5) 

x 

  

#Średnia  

sr_x <- mean(x) 

print(paste("Średnio wektora x to: ", sr_x)) 

#Suma 

suma_x <- sum(x) 

print(paste("Suma wektora x to: ", suma_x)) 

#Odchylenie standardowe 

odch_stand_x <- sd(x) 

print(paste("Odchylenie standardowe wektora x to: ", round(odch_stand_x,2))) 

  

#Histogram 

histogram <- hist(x, col = 'blue',xlim = c(0,15), xaxp = c(0,15, 15), 

xlab = 'liczba', ylab = 'ilość wystąpień', main = 'Rozkład Poissona') 

  

#Boxplot 

boxplocik = boxplot(x, col = 'blue',ylab = 'liczba', ylim = c(0,12),yaxp = c(0,12, 12), main = "Rozkład Poissona") 

  

  

# -------------------------------------------------------- 

# Zadanie.11 

   

# Wczytaj dane ze zbioru "countries of the world.csv"  

# Zapoznaj się z danymi korzystając np. z funkcji names(), summary(), str(),  

# dim(), itd., obejrzysz też dane za pomocą funkcji View() 

# Zamień puste pola na wartości NA: data[data==""] <- NA 

# zmień nazwy kolumn, zgodnie z następującym wzorem: 

# Area_sq_mi -> Area 

# Pop_Density_per_sq_mi -> Pop_dens 

# GDPper_capita -> GDP 

# Usuń ze zbioru wszystkie zmienne poza: Country, Region, Population, Area,  

# Pop_dens, GDP, Literacy, Birthrate, Deathrate. 

# Usuń spacje ze zmiennej Region (z przodu i z tyłu nazw - funkcja str_trim) 

#   

# Dla ilu krajów występują braki danych w zmiennej Literacy? Użyj funkcji is.na i sum 

# Wyświetl wszystkie kategorie zmiennej Region. Jaka jest dominanta? (RVAideMemoire::mod(?)) 

# Sprawdź udział procentowy poszczególnych kategorii. 

# Jaka jest średnia i mediana zmiennych Population, Area i GDP?  

# Stwórz histogram oraz wykres pudełkowy dla zmiennych GDP oraz Literacy.  

# Odpowiednio podpisz osie histogramu (uwzględniając też jednostki) 

# Wyświetl kwartyle dla funkcji GDP. Teraz stwórz nową zmienną - będzie to zmienna  

# kategoryczną oparta na zmiennej GDP. Nowa zmienna: 

# - powinna się nazywać "GDP_binned" 

# - będzie przyjmować cztery wartości (kategorie): 

# - pierwsza kategoria ma zawierać wartości od minimum do pierwszego kwartyla. Nazwij ją "Very_poor" 

# - druga kategoria ma zawierać wartości od pierwszego kwartyla do mediany. Nazwij ją "Poor" 

# - trzecia kategoria ma zawierać wartości od mediany do trzeciego. Nazwij ją "Medium" 

# - czwarta kategoria ma zawierać wartości od mediany do trzeciego. Nazwij ją "Rich" 

# - (użyj funkcji ifelse albo case_when)   

# Stwórz nową zmienną logiczną, która przyjmuje wartość „True”, kiedy wartość  

# zmiennej „Birthrate” jest większa lub równa od wartości zmiennej „Deathrate”, 

# a wartość „False” w przeciwnym przypadku. Wartość „True” w nowej zmiennej 

# oznacza – najprościej ujmując – że w roku badania w danym kraju więcej osób się 

# urodziło niż umarło. Stwórz wykres słupkowy dla nowo powstałej zmiennej,  

#  pokazując częstości występowania pierwszej i drugiej kategorii. 

# -------------------------------------------------------- 

 

#Biblioteka stringr 

install.packages("stringr") 

require("stringr") 

#Wczytanie danych ze zbioru csv 

plik <- read.csv("C:/Users/patry/Desktop/R/countries of the world.csv", header = TRUE, sep = ",") 

  

#zapoznanie się z danymi 

nazwy_kolumn <- colnames(plik) 

nazwy_kolumn 

summar <- summary(plik) 

summar 

  

#Zamiana pustych pól na NA 

plik[plik == ''] <- NA 

  

#Zamiana nazw kolumn Area, Pop_dens oraz GDP 

colnames(plik)[colnames(plik) == "Area..sq..mi.."] ="Area" 

colnames(plik)[colnames(plik) == "Pop..Density..per.sq..mi.."] ="Pop_dens" 

colnames(plik)[colnames(plik) == "GDP....per.capita."] ="GDP" 

  

#Usunięcie ze zbioru wszystkich kolumn oprócz Country, Region, Population, Area,  

# Pop_dens, GDP, Literacy, Birthrate, Deathrate. 

plik <- subset(plik, select = -c(6,7,8,11,12,13,14,15,18,19,20)) 

plik$Region <- str_trim(plik$Region) 

  

  

#Dla ilu krajów występują braki danych w zmiennej Literacy? 

 

ile <- sum(is.na(plik$Literacy....)) 

Ile 

 

 

#Wyświetl wszystkie kategorie zmiennej Region. Jaka jest dominanta? 

 

install.packages("RVAideMemoire") 

require("RVAideMemoire") 

kat_region <- mod(plik$Region) 

print(paste("Dominanta to: ",kat_region)) 

  

#Wszystkie kategorie 

zmienna_region <- unique(plik$Region) 

zmienna_region 

# Sprawdź udział procentowy poszczególnych kategorii. 

grupa_ilosc <- table(plik$Region) 

grupa_ilosc 

wszystkie_ilosc <- sum(grupa_ilosc) 

wszystkie_ilosc 

uklad_proc <- round((grupa_ilosc/wszystkie_ilosc)*100, 2) 

uklad_proc 

# Jaka jest średnia i mediana zmiennych Population, Area i GDP?  

#Średnia 

srednia <- round(c(mean(plik$Population),mean(plik$Area), mean(plik$GDP, na.rm = TRUE)), 2) 

print(paste("Średnia dla zmiennej Population wynosi: ", srednia[1])) 

print(paste("Średnia dla zmiennej Area wynosi: ", srednia[2])) 

print(paste("Średnia dla zmiennej GDP wynosi: ", srednia[3])) 

#Mediana 

mediana <-round(c(median(plik$Population),median(plik$Area), median(plik$GDP, na.rm = TRUE)), 2) 

print(paste("mediana dla zmiennej Population wynosi: ", mediana[1])) 

print(paste("mediana dla zmiennej Area wynosi: ", mediana[2])) 

print(paste("mediana dla zmiennej GDP wynosi: ", mediana[3])) 

  

  

  

# Stwórz histogram oraz wykres pudełkowy dla zmiennych GDP oraz Literacy.  

dane_GDP <- plik$GDP 

dane_GDP 

  

#Zmienna Literacy jest typu character przez co nie mozna utworzyć Histogramu, Trzeba zamienić na typ numeryczny 

dane_Literacy <- plik$Literacy.... 

dane_Literacy 

liter <- gsub(",",".",dane_Literacy) 

liter 

liczby_liter <- as.numeric(liter) 

liczby_liter 

  

#Histogram i boxplot dla GDP 

hist_GDP <- hist(dane_GDP, col = 'red',xlab = 'GDP [zł]',ylab = 'Częstotliwość występowania', main = 'Wykres GDP') 

  

boxplotGDP = boxplot(dane_GDP, col = 'blue', main = "Wykres pudełkowy GDP") 

  

#Histogram is boxplot dla Literacy 

hist_Literacy <- hist(liczby_liter, xlab = "alfabetyzm [%]", ylab = 'Częstotliwość', col = 'green', main = 'Wykres kolumny Literacy') 

  

boxplotLiteracy <- boxplot(liczby_liter, col = 'blue', main = "Wykres pudełkowy Literacy") 

  

# Wyświetl kwartyle dla funkcji GDP. 

kwartyl <-quantile(dane_GDP, na.rm = TRUE) 

kwartyl 

# Teraz stworz nową zmienną - będzie to zmienna  

# kategoryczną oparta na zmiennej GDP. Nowa zmienna: 

# - powinna się nazywać "GDP_binned" 

# - będzie przyjmować cztery wartości (kategorie): 

# - pierwsza kategoria ma zawierać wartości od minimum do pierwszego kwartyla. Nazwij ją "Very_poor" 

# - druga kategoria ma zawierać wartości od pierwszego kwartyla do mediany. Nazwij ją "Poor" 

# - trzecia kategoria ma zawierać wartości od mediany do trzeciego. Nazwij ją "Medium" 

# - czwarta kategoria ma zawierać wartości od mediany do trzeciego. Nazwij ją "Rich" 

# - (użyj funkcji ifelse albo case_when) 

install.packages("dplyr") 

require("dplyr") 

  

df_GDP_bez_NA <- data.frame(na.omit(dane_GDP)) 

  

GDP_binned <-df_GDP_bez_NA %>% mutate(GDP_binned = case_when( 

  df_GDP_bez_NA < kwartyl[2] ~ 'Very Poor', 

  df_GDP_bez_NA < kwartyl[3] ~ 'Poor', 

  df_GDP_bez_NA < kwartyl[4] ~ 'Medium', 

  TRUE ~ 'Rich')) 

GDP_binned 

  

  

# Stwórz nową zmienną logiczną, która przyjmuje wartość „True”, kiedy wartość  

# zmiennej „Birthrate” jest większa lub równa od wartości zmiennej „Deathrate”, 

# a wartość „False” w przeciwnym przypadku. Wartość „True” w nowej zmiennej 

# oznacza – najprościej ujmując – że w roku badania w danym kraju więcej osób się 

# urodziło niż umarło. 

zmienna = TRUE 

new_zmienna <- TRUE 

i=1 

  

br <- gsub(",",".",plik$Birthrate) 

  

  

dr <- gsub(",",".",plik$Deathrate) 

  

while(i<=length(plik$Country)){ 

if((is.na(br[i] == TRUE))||(is.na(dr[i] == TRUE))){ 

  i=i+1 

  next 

} else if (br[i] >= dr[i]){ 

    zmienna = TRUE 

    new_zmienna[i] = zmienna 

    i=i+1 

} else { 

  zmienna = FALSE 

  new_zmienna[i] = zmienna 

  i=i+1 

} 

} 

new_zmienna 

  

dl_new_zmienna <- length(new_zmienna) 

czestosc_new_zmienna <- table(new_zmienna) 

procent_new_zmienna <- (czestosc_new_zmienna/dl_new_zmienna)*100 

procent_new_zmienna 

os_x <- c("FALSE", "TRUE") 

#Stwórz wykres słupkowy dla nowo powstałej zmiennej, pokazując częstości występowania pierwszej i drugiej kategorii. 

wykres_slupkowy <- barplot(procent_new_zmienna, names.arg = os_x,main = "Wykres słupkowy", xlab = "BOLLEAN VALUE",yaxp = c(0,100, 10), ylab = "częstość występowania [%]", col = 'purple') 
